using Serilog.Sinks.OpenTelemetry;

namespace AI.Library.Configuration;

/// <summary>
/// Options to set up telemetry
/// <a href="https://github.com/serilog/serilog-sinks-opentelemetry">Serilog.Sinks.OpenTelemetry</a>
/// </summary>
public sealed class OpenTelemetryOptions
{
    /// <summary>
    /// Configuration ConfigSectionName
    /// </summary>
    public const string SectionName = "OpenTelemetry";

    /// <summary>
    /// OpenTelemetry Collector default endpoint
    /// </summary>
    public string? Endpoint { get; set; } = "http://localhost:4317";

    /// <summary>
    /// OpenTelemetry Collector Protocol
    /// </summary>
    public OtlpProtocol Protocol { get; set; } = OtlpProtocol.Grpc;

    /// <summary>
    /// Which fields should be included in the log events generated by the sink. The default is to include <c>TraceId</c>
    /// and <c>SpanId</c> when <see cref="P:System.Diagnostics.Activity.Current" /> is not null, and <c>message_template.text</c>.
    /// This field will only be used when not null, else the default value from the Serilog.Sinks.OpenTelemetry will be used.
    /// </summary>
    public IncludedData? IncludedData { get; set; } = default!;


    /// <summary>
    /// A attributes of the resource attached to the logs generated by the sink. The values must be simple primitive
    /// values: integers, doubles, strings, or booleans. Other values will be silently ignored.
    /// This field will only be used when not null, else the default value from the Serilog.Sinks.OpenTelemetry will be used.
    /// <a href="https://github.com/serilog/serilog-sinks-opentelemetry">Serilog.Sinks.OpenTelemetry</a>
    /// At the section Serilog LogEvent to OpenTelemetry log record mapping
    /// </summary>
    public IDictionary<string, object>? ResourceAttributes { get; set; } = default!;

    /// <summary>
    /// >Headers to send with network requests.
    /// This field will only be used when not null, else the default value from the Serilog.Sinks.OpenTelemetry will be used.
    /// </summary>
    public IDictionary<string, string>? Headers { get; set; } = default!;

}

