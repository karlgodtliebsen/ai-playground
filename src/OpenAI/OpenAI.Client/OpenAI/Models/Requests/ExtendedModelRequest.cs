using System.Text.Json.Serialization;

namespace OpenAI.Client.OpenAI.Models.Requests;

public class ExtendedModelRequest : ModelBaseRequest
{

    /// <summary>
    ///  The maximum number of tokens to generate in the chat completion.
    /// The total length of input tokens and generated tokens is limited by the model's context length.
    /// </summary>

    [JsonPropertyName("max_tokens")]
    public int? MaxTokens { get; init; } = 16;
    /// <summary>
    /// What sampling temperature to use, between 0 and 2. 
    ///Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    ///We generally recommend altering this or top_p but not both.
    /// </summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; } = 1.0;

    /// <summary>
    /// Defaults to 1
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
    /// So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    /// We generally recommend altering this or temperature but not both.
    /// </summary>
    [JsonPropertyName("top_p")]
    public double? TopP { get; init; } = 1.0;

    [JsonPropertyName("n")]
    public int? NumChoicesPerPrompt { get; init; } = default!;


    /// <summary>
    /// If set, partial message deltas will be sent, like in ChatGPT.
    /// Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data
    /// </summary>
    [JsonPropertyName("stream")]
    public bool? Stream { get; init; } = default!;


    /// <summary>
    /// Include the log probabilities on the logprobs most likely tokens, which can be found in <see cref="CompletionResult.Completions"/> -> <see cref="Choice.Logprobs"/>. So for example, if logprobs is 5, the API will return a list of the 5 most likely tokens. If logprobs is supplied, the API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.  The maximum value for logprobs is 5.
    /// </summary>
    [JsonPropertyName("logprobs")]
    public int? Logprobs { get; init; } = default!;

    /// <summary>
    /// Echo back the prompt in addition to the completion.  Defaults to false.
    /// Up to 4 sequences where the API will stop generating further tokens.
    /// </summary>
    [JsonPropertyName("stop")]
    public string[]? Stop { get; init; } = default!;

    /// <summary>
    /// The scale of the penalty applied if a token is already present at all.
    /// Should generally be between 0 and 1, although negative numbers are allowed to encourage token reuse.  Defaults to 0.
    /// Number between -2.0 and 2.0.
    /// Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    /// </summary>
    [JsonPropertyName("presence_penalty")]
    public double? PresencePenalty { get; init; } = default!;

    /// <summary>
    /// The scale of the penalty for how often a token is used.  Should generally be between 0 and 1, although negative numbers are allowed to encourage token reuse.  Defaults to 0.
    /// Number between -2.0 and 2.0.
    /// Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    /// </summary>
    [JsonPropertyName("frequency_penalty")]
    public double? FrequencyPenalty { get; init; } = default!;

    /// <summary>
    /// Modify the likelihood of specified tokens appearing in the completion.
    /// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an
    /// associated bias value from -100 to 100.
    /// Mathematically, the bias is added to the logits generated by the model prior to sampling.
    /// The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection;
    /// values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    /// </summary>
    [JsonPropertyName("logit_bias")]
    public Dictionary<string, string>? LogitBias { get; init; } = default!;


    /// <summary>
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
    /// </summary>
    [JsonPropertyName("user")]
    public string? User { get; init; } = default!;
}
