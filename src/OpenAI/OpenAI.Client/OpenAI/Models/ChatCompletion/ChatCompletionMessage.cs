using System.Text.Json.Serialization;

namespace OpenAI.Client.OpenAI.Models.ChatCompletion;

public class ChatCompletionMessage
{
    /// <summary>
    /// The role of the messages author. One of system, user, assistant, or function.
    /// </summary>
    [JsonPropertyName("role")]
    public string? Role { get; init; } = default!;

    /// <summary>
    /// The contents of the message. content is required for all messages except assistant messages with function calls.
    /// </summary>
    [JsonPropertyName("content")]
    public string? Content { get; init; } = default!;


    /// <summary>
    /// The name of the author of this message. name is required if role is function, and it should be the name of the function whose response is in the content.
    /// May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    /// </summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; } = default!;

    /// <summary>
    /// The name and arguments of a function that should be called, as generated by the model.
    /// Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user.
    /// "auto" means the model can pick between an end-user or calling a function.
    /// Specifying a particular function via {"name":\ "my_function"} forces the model to call that function.
    /// "none" is the default when no functions are present.
    /// "auto" is the default if functions are present.    /// </summary>
    [JsonPropertyName("function_call")]
    public object? FunctionCall { get; init; } = default!;



}
