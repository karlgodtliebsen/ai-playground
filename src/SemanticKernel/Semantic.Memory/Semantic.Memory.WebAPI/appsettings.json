{
  "SemanticMemory": {

    "Service": {
      // Whether to run the web service that allows to upload files and search memory
      // Use these booleans to deploy the web service and the handlers on same/different VMs
      "RunWebService": true,
      // Whether to run the asynchronous pipeline handlers
      // Use these booleans to deploy the web service and the handlers on same/different VMs
      "RunHandlers": true,
      // Whether to expose OpenAPI swagger UI
      "OpenApiEnabled": true
    },

    // "AzureBlobs" or "SimpleFileStorage"
    "ContentStorageType": "SimpleFileStorage",

    // "AzureOpenAIText" or "OpenAI"
    "TextGeneratorType": "OpenAI",

    // "None" or "AzureFormRecognizer"
    "ImageOcrType": "None",

    // Data ingestion pipelines configuration.
    "DataIngestion": {

      // - InProcess: in process .NET orchestrator, synchronous/no queues
      // - Distributed: asynchronous queue based orchestrator
      "OrchestrationType": "InProcess",

      //"DistributedOrchestration": {
      //  // "AzureQueue", "RabbitMQ", "SimpleQueues"
      //  "QueueType": "AzureQueue"
      //},

      // Multiple generators can be used, e.g. for data migration, A/B testing, etc.
      "EmbeddingGeneratorTypes": [ "OpenAI" ],

      // Vectors can be written to multiple storages, e.g. for data migration, A/B testing, etc.
      // "AzureCognitiveSearch", "Qdrant", "SimpleVectorDb"
      "VectorDbTypes": [ "Qdrant" ],
      "DefaultSteps": [
        "extract",
        "partition",
        "gen_embeddings",
        "save_embeddings",
        "summarize",
        "gen_embeddings",
        "save_embeddings"
      ]
    },
    "Retrieval": {
      // "AzureOpenAIEmbedding" or "OpenAI"
      "EmbeddingGeneratorType": "OpenAI",
      // "AzureCognitiveSearch", "Qdrant", "SimpleVectorDb"
      "VectorDbType": "Qdrant"
    },
    "Services": {
      "SimpleFileStorage": {
        "Directory": "tmp-content-storage"
      },
      "SimpleQueues": {
        "Directory": "tmp-queues"
      },
      "SimpleVectorDb": {
        "Directory": "tmp-vector-db",
        "StorageType": "TextFile"
      },
      "AzureQueue": {
        // "ConnectionString" or "AzureIdentity". For other options see <AzureQueueConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        // Azure Storage account name, required when using AzureIdentity auth
        // Note: you can use an env var 'SemanticMemory__Orchestration__DistributedPipeline__AzureQueue__Account' to set this
        "Account": "",
        // Required when Auth == ConnectionString
        // Note: you can use an env var 'SemanticMemory__Orchestration__DistributedPipeline__AzureQueue__ConnectionString' to set this
        "ConnectionString": "",
        // Setting used only for country clouds
        "EndpointSuffix": "core.windows.net"
      },
      "AzureCognitiveSearch": {
        // "ApiKey" or "AzureIdentity". For other options see <AzureCognitiveSearchConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        "Endpoint": "https://<...>",
        "APIKey": ""
      },
      "qdrant": {
        "Endpoint": "http://localhost:6333/",
        "Port": 6333
      },
      "AzureOpenAIEmbedding": {
        // "ApiKey" or "AzureIdentity"
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        "Endpoint": "https://<...>.openai.azure.com/",
        "Deployment": "",
        "APIKey": ""
      },
      "OpenAI": {
        "TextModel": "gpt-3.5-turbo-16k",
        "EmbeddingModel": "text-embedding-ada-002",
        "APIKey": "",
        "OrgId": "",
        "MaxRetries": 10
      }
    }
  },
  "DockerLaunch": {
    "DockerSettings": [
      {
        "ImageName": "qdrant/qdrant:latest",
        "HostPort": 6343,
        "ContainerPort": 6333,
        "WaitForPort": 6333,
        "HostPath": "/temp/test_qdrant_storage",
        "ContainerPath": "/qdrant/storage"
      }
    ]
  },
  "OpenAI": {
    "ApiKey": "<openai api key>",
    "OrganisationKey": "<organisation key>",
    "Endpoint": "https://api.openai.com/v1/"
  },

  "AllowedHosts": "*",
  "Cors": {
    "origins": [],
    "policy": "AllowedPolicies"
  },
  "azureAd": {
    "Instance": "https://login.microsoftonline.com/",
    "Domain": "<read from user secrets or keyvault>",
    "TenantId": "<read from user secrets or keyvault>",
    "ClientId": "<read from user secrets or keyvault>"
  },
  "openApi": {
    "SecurityDefinition": "JWT Authentication",
    "SecurityDefinitionName": "Bearer",
    "UseXml": true,
    "SecurityScheme": {
      "Type": "Http",
      "Description": "Enter JWT Bearer token **_only_*",
      "Name": "JWT Authentication",
      "In": "Header",
      "Scheme": "bearer",
      "BearerFormat": "JWT",
      "Reference": {
        "Id": "Bearer",
        "Type": "SecurityScheme"
      }
    },
    "Info": {
      "Version": "v1",
      "Title": "Semantic Memory requests",
      "Description": "ASP.NET Web API handling Semantic Memory model requests"
    }
  },
  "appLogging": {
    "OpenTelemetry": {
      "Endpoint": "http://localhost:4317",
      "Protocol": "Grpc"
    },
    "UseRequestResponseLogging": true
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "Serilog": {
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Warning",
        "System": "Warning"
      }
    },
    "Using": [ "Serilog.Sinks.File", "Serilog.Sinks.Console", "Serilog.Sinks.Seq" ],
    "WriteTo": [
      {
        "Name": "File",
        "Args": {
          "path": "/temp/logs/Semantic_Memory.WebAPI..log",
          "rollingInterval": "Day",
          "retainedFileCountLimit": 14,
          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}"
        }
      },
      {
        "Name": "Seq",
        "Args": { "serverUrl": "http://localhost:5341" }
      }
    ],
    "Enrich": [ "FromLogContext", "WithMachineName", "WithThreadId", "WithExceptionDetails" ],
    "Properties": {
      "Application": "Semantic.Memory.WebAPI"
    }
  }
}