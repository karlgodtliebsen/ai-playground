{
  "SemanticMemory": {

    // "AzureBlobs" or "SimpleFileStorage"
    "ContentStorageType": "SimpleFileStorage",

    // "AzureOpenAIText" or "OpenAI"
    "TextGeneratorType": "OpenAI",

    // "None" or "AzureFormRecognizer"
    "ImageOcrType": "None",

    // Data ingestion pipelines configuration.
    "DataIngestion": {

      // - InProcess: in process .NET orchestrator, synchronous/no queues
      // - Distributed: asynchronous queue based orchestrator
      "OrchestrationType": "InProcess",

      //"DistributedOrchestration": {
      //  // "AzureQueue", "RabbitMQ", "SimpleQueues"
      //  "QueueType": "AzureQueue"
      //},

      // Multiple generators can be used, e.g. for data migration, A/B testing, etc.
      "EmbeddingGeneratorTypes": [ "OpenAI" ],

      // Vectors can be written to multiple storages, e.g. for data migration, A/B testing, etc.
      // "AzureCognitiveSearch", "Qdrant", "SimpleVectorDb"
      "VectorDbTypes": [ "Qdrant" ],
      "DefaultSteps": [
        "extract",
        "partition",
        "gen_embeddings",
        "save_embeddings",
        "summarize",
        "gen_embeddings",
        "save_embeddings"
      ]
    },
    "Retrieval": {
      // "AzureOpenAIEmbedding" or "OpenAI"
      "EmbeddingGeneratorType": "OpenAI",
      // "AzureCognitiveSearch", "Qdrant", "SimpleVectorDb"
      "VectorDbType": "Qdrant"
    },
    "Services": {
      "SimpleFileStorage": {
        "Directory": "/projects/ai/semantic-memory/tmp-content-storage"
      },
      "SimpleQueues": {
        "Directory": "/projects/ai/semantic-memory/tmp-queues"
      },
      "SimpleVectorDb": {
        "Directory": "/projects/ai/semantic-memory/tmp-vector-db",
        "StorageType": "TextFile"
      },
      "AzureQueue": {
        // "ConnectionString" or "AzureIdentity". For other options see <AzureQueueConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        // Azure Storage account name, required when using AzureIdentity auth
        // Note: you can use an env var 'SemanticMemory__Orchestration__DistributedPipeline__AzureQueue__Account' to set this
        "Account": "",
        // Required when Auth == ConnectionString
        // Note: you can use an env var 'SemanticMemory__Orchestration__DistributedPipeline__AzureQueue__ConnectionString' to set this
        "ConnectionString": "",
        // Setting used only for country clouds
        "EndpointSuffix": "core.windows.net"
      },
      "AzureCognitiveSearch": {
        // "ApiKey" or "AzureIdentity". For other options see <AzureCognitiveSearchConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        "Endpoint": "https://<...>",
        "APIKey": ""
      },
      "qdrant": {
        "Endpoint": "http://localhost:6333/",
        "Port": 6333
      },
      //"AzureOpenAIEmbedding": {
      //  // "ApiKey" or "AzureIdentity"
      //  // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
      //  //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
      //  "Auth": "AzureIdentity",
      //  "Endpoint": "https://<...>.openai.azure.com/",
      //  "Deployment": "",
      //  "APIKey": ""
      //},
      "OpenAI": {
        "TextModel": "gpt-3.5-turbo-16k",
        "EmbeddingModel": "text-embedding-ada-002",
        "APIKey": "",
        "OrgId": "",
        "MaxRetries": 10
      }
    }
  },
  "qdrant": {
    "Endpoint": "http://localhost:6333/",
    "Port": 6333
  },
  "kafka": {
    "bootstrapServers": "localhost:9092",
    "applicationId": "kafka-wikimedia_application-v1.0.0",
    "groupId": "wikimedia-stream-group-1",
    "topicProducer": "wikimedia_recent_changes",
    "topicConsumer": "wikimedia_recent_changes"
  },
  "Serilog": {
    "MinimumLevel": {
      "Default": "Debug",
      "Override": {
        "Microsoft": "Warning",
        "System": "Warning"
      }
    },
    "Using": [ "Serilog.Sinks.File", "Serilog.Sinks.Console", "Serilog.Sinks.Seq" ],

    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] ({Application}/{MachineName}/{ThreadId}) {Message:lj}{NewLine}{Exception}"
        }
      },
      {
        "Name": "File",
        "Args": {
          "path": "/temp/logs/SemanticMemory.Kafka.Streaming-WikiMedia-NewsFeed..log",
          "rollingInterval": "Day",
          "retainedFileCountLimit": 14,
          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}"
        }
      },
      {
        "Name": "Seq",
        "Args": { "serverUrl": "http://localhost:5341" }
      },
      { "Name": "DiagnosticTrace" }
    ],
    "Enrich": [ "FromLogContext", "WithMachineName", "WithThreadId", "WithExceptionDetails" ],
    "Properties": {
      "Application": "SemanticMemory.Kafka.Streaming-WikiMedia-NewsFeed"
    }
  }

}
